# -*- coding: utf-8 -*-
"""XGBoost Dibyendu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WVPmn9rn9E508rr_keVOxBFxD_MHoQnj

**Making necessary imports**
"""

import numpy as np
import pandas as pd
import os, sys
from sklearn.preprocessing import MinMaxScaler
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

"""**Reading the data into a DataFrame and get the first 5 records**"""

df=pd.read_csv('/parkinsons.csv')
df.head()

"""**Getting the features and labels from the DataFrame (dataset)**

**The features are all the columns except ‘status’, and the labels are those in the ‘status’ column**
"""

features=df.loc[:,df.columns!='status'].values[:,1:]
labels=df.loc[:,'status'].values

"""**The ‘status’ column has values 0 and 1 as labels**

**Getting the counts of these labels for both 0 and 1**
"""

print(labels[labels==1].shape[0], labels[labels==0].shape[0])

"""*We have 147 ones and 48 zeros in the status column in our dataset*

**Initialized a MinMaxScaler and scale the features to between -1 and 1 to normalize them**

The MinMaxScaler transforms features by scaling them to a given range 

**The fit_transform() method fits to the data and then transforms it**

We don’t need to scale the labels
"""

scaler=MinMaxScaler((-1,1))
x=scaler.fit_transform(features)
y=labels

"""**Splitting the dataset into training and testing sets keeping 20% of the data for testing**"""

x_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.2, random_state=7)

"""**Initialized an XGBClassifier and training the model** 

This classifies using eXtreme Gradient Boosting- using gradient boosting algorithms for modern data science problems

It falls under the category of Ensemble Learning in ML, where we train and predict using many models to produce one superior output
"""

model=XGBClassifier()
model.fit(x_train,y_train)

"""**Finally we generated y_pred (predicted values for x_test) and calculated the accuracy for the model and printed it out**"""

y_pred=model.predict(x_test)
a = accuracy_score(y_test, y_pred)*100
print('The accuracy score for this model is =',a)